package common;


/**
* common/_BankServerInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from bankserver.idl
* Thursday, November 2, 2017 4:02:20 PM EDT
*/


//Interface for the Banking Server
public class _BankServerInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements common.BankServerInterface
{

  public int getLocalAccountCount ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLocalAccountCount", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLocalAccountCount (        );
            } finally {
                _releaseReply ($in);
            }
  } // getLocalAccountCount

  public String[] getAllCustomerAccount ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllCustomerAccount", true);
                $in = _invoke ($out);
                String $result[] = common.BankServerInterfacePackage.accountsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAllCustomerAccount (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllCustomerAccount

  public boolean createAccount (String firstName, String lastName, String address, String phone, String customerID, common.BranchID branchID) throws common.BankServerInterfacePackage.invalid_client
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createAccount", true);
                $out.write_string (firstName);
                $out.write_string (lastName);
                $out.write_string (address);
                $out.write_string (phone);
                $out.write_string (customerID);
                common.BranchIDHelper.write ($out, branchID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:common/BankServerInterface/invalid_client:1.0"))
                    throw common.BankServerInterfacePackage.invalid_clientHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createAccount (firstName, lastName, address, phone, customerID, branchID        );
            } finally {
                _releaseReply ($in);
            }
  } // createAccount

  public boolean editRecord (String customerID, common.EditRecordFields fieldName, String newValue) throws common.BankServerInterfacePackage.invalid_client
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("editRecord", true);
                $out.write_string (customerID);
                common.EditRecordFieldsHelper.write ($out, fieldName);
                $out.write_string (newValue);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:common/BankServerInterface/invalid_client:1.0"))
                    throw common.BankServerInterfacePackage.invalid_clientHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return editRecord (customerID, fieldName, newValue        );
            } finally {
                _releaseReply ($in);
            }
  } // editRecord

  public boolean deposit (String customerID, double amount) throws common.BankServerInterfacePackage.invalid_client, common.BankServerInterfacePackage.invalid_bankOperation
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deposit", true);
                $out.write_string (customerID);
                $out.write_double (amount);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:common/BankServerInterface/invalid_client:1.0"))
                    throw common.BankServerInterfacePackage.invalid_clientHelper.read ($in);
                else if (_id.equals ("IDL:common/BankServerInterface/invalid_bankOperation:1.0"))
                    throw common.BankServerInterfacePackage.invalid_bankOperationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return deposit (customerID, amount        );
            } finally {
                _releaseReply ($in);
            }
  } // deposit

  public boolean withdraw (String customerID, double amount) throws common.BankServerInterfacePackage.invalid_client, common.BankServerInterfacePackage.invalid_bankOperation
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("withdraw", true);
                $out.write_string (customerID);
                $out.write_double (amount);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:common/BankServerInterface/invalid_client:1.0"))
                    throw common.BankServerInterfacePackage.invalid_clientHelper.read ($in);
                else if (_id.equals ("IDL:common/BankServerInterface/invalid_bankOperation:1.0"))
                    throw common.BankServerInterfacePackage.invalid_bankOperationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return withdraw (customerID, amount        );
            } finally {
                _releaseReply ($in);
            }
  } // withdraw

  public double getBalance (String customerID) throws common.BankServerInterfacePackage.invalid_client
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getBalance", true);
                $out.write_string (customerID);
                $in = _invoke ($out);
                double $result = $in.read_double ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:common/BankServerInterface/invalid_client:1.0"))
                    throw common.BankServerInterfacePackage.invalid_clientHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getBalance (customerID        );
            } finally {
                _releaseReply ($in);
            }
  } // getBalance

  public boolean transferFund (String sourceID, float amount, String destID) throws common.BankServerInterfacePackage.invalid_client, common.BankServerInterfacePackage.invalid_bankOperation
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("transferFund", true);
                $out.write_string (sourceID);
                $out.write_float (amount);
                $out.write_string (destID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:common/BankServerInterface/invalid_client:1.0"))
                    throw common.BankServerInterfacePackage.invalid_clientHelper.read ($in);
                else if (_id.equals ("IDL:common/BankServerInterface/invalid_bankOperation:1.0"))
                    throw common.BankServerInterfacePackage.invalid_bankOperationHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return transferFund (sourceID, amount, destID        );
            } finally {
                _releaseReply ($in);
            }
  } // transferFund

  public int getUDPPort ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUDPPort", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUDPPort (        );
            } finally {
                _releaseReply ($in);
            }
  } // getUDPPort

  public String getUDPHost ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUDPHost", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUDPHost (        );
            } finally {
                _releaseReply ($in);
            }
  } // getUDPHost

  public void shutdown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutdown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutdown

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:common/BankServerInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _BankServerInterfaceStub
